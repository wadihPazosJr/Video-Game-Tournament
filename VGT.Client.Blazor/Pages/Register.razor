@page "/register"
@using VGT.Client.Blazor.Components
@using System.ComponentModel.DataAnnotations;
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.Extensions.Primitives
@using System.Text.Json
@inject HttpClient Http
@inject NavigationManager NavManager
@inject ILocalStorageService localStorage

<PageTitle Title="Register | Games Against COVID"></PageTitle>

<PageHeader _Header="Register" _ImageSrc="/images/amazing-grace-logo.png">Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.</PageHeader>

<h1>Choose your game</h1>
<form>
    <select @bind="_CurrentGameChosen">
        <option value="3476251879890862080">Mario Kart 8 Deluxe</option>
        <option value="3476254303505145856">Rainbow Six Siege</option>
        <option value="3476256720841089024">Minecraft</option>
        <option value="3476257827289923584">Clash Royale</option>
        <option value="3476259067863236608">Call of Duty : Warzone</option>
        <option value="3476260676093149184">NBA 2K20</option>
        <option value="3476261911264198656">League of Legends</option>
        <option value="3476263981375184896">Super Smash Bros Ultimate</option>
    </select>
</form>
@if (_CurrentGameChosen != null)
{
    if (!IsSingleGameChosen())
    {
        <h1>Team</h1>
        <EditForm Model="@_Team">
            <p>
                <label>
                    Name of Team
                    <InputText @bind-Value="_Team.NameOfTeam"></InputText>
                </label>
            </p>
            <h1>Team Members</h1>
            <h3>Team Member #1</h3>
            <p>
                <label>
                    First Name
                    <InputText @bind-Value="_Team.TeamMembers[0].ParticipantFirstName" />
                </label>
            </p>
            <p>
                <label>
                    Last Name
                    <br />
                    <InputText @bind-Value="_Team.TeamMembers[0].ParticipantLastName" />
                </label>
            </p>
            <p>
                <label>
                    Email
                    <InputText placeholder="johndoe@gmail.com" @bind-Value="_Team.TeamMembers[0].ParticipantEMail" />
                </label>
            </p>
            <p>
                <label>
                    Phone Number
                    <InputText placeholder="(xxx)-xxx-xxxx" @bind-Value="_Team.TeamMembers[0].PhoneOfParticipant" />
                </label>
            </p>
            <p>
                <label>
                    In Game Name
                    <InputText @bind-Value="_Team.TeamMembers[0].InGameName" />
                </label>
            </p>
            <h3>Team Member #2</h3>
            <p>
                <label>
                    First Name
                    <InputText @bind-Value="_Team.TeamMembers[1].ParticipantFirstName" />
                </label>
            </p>
            <p>
                <label>
                    Last Name
                    <br />
                    <InputText @bind-Value="_Team.TeamMembers[1].ParticipantLastName" />
                </label>
            </p>
            <p>
                <label>
                    Email
                    <InputText placeholder="johndoe@gmail.com" @bind-Value="_Team.TeamMembers[1].ParticipantEMail" />
                </label>
            </p>
            <p>
                <label>
                    Phone Number
                    <InputText placeholder="(xxx)-xxx-xxxx" @bind-Value="_Team.TeamMembers[1].PhoneOfParticipant" />
                </label>
            </p>
            <p>
                <label>
                    In Game Name
                    <InputText @bind-Value="_Team.TeamMembers[1].InGameName" />
                </label>
            </p>
            <h3>Team Member #3</h3>
            <p>
                <label>
                    First Name
                    <InputText @bind-Value="_Team.TeamMembers[2].ParticipantFirstName" />
                </label>
            </p>
            <p>
                <label>
                    Last Name
                    <br />
                    <InputText @bind-Value="_Team.TeamMembers[2].ParticipantLastName" />
                </label>
            </p>
            <p>
                <label>
                    Email
                    <InputText placeholder="johndoe@gmail.com" @bind-Value="_Team.TeamMembers[2].ParticipantEMail" />
                </label>
            </p>
            <p>
                <label>
                    Phone Number
                    <InputText placeholder="(xxx)-xxx-xxxx" @bind-Value="_Team.TeamMembers[2].PhoneOfParticipant" />
                </label>
            </p>
            <p>
                <label>
                    In Game Name
                    <InputText @bind-Value="_Team.TeamMembers[2].InGameName" />
                </label>
            </p>
            <h3>Team Member #4</h3>
            <p>
                <label>
                    First Name
                    <InputText @bind-Value="_Team.TeamMembers[3].ParticipantFirstName" />
                </label>
            </p>
            <p>
                <label>
                    Last Name
                    <br />
                    <InputText @bind-Value="_Team.TeamMembers[3].ParticipantLastName" />
                </label>
            </p>
            <p>
                <label>
                    Email
                    <InputText placeholder="johndoe@gmail.com" @bind-Value="_Team.TeamMembers[3].ParticipantEMail" />
                </label>
            </p>
            <p>
                <label>
                    Phone Number
                    <InputText placeholder="(xxx)-xxx-xxxx" @bind-Value="_Team.TeamMembers[3].PhoneOfParticipant" />
                </label>
            </p>
            <p>
                <label>
                    In Game Name
                    <InputText @bind-Value="_Team.TeamMembers[3].InGameName" />
                </label>
            </p>
            <h3>Team Member #5</h3>
            <p>
                <label>
                    First Name
                    <InputText @bind-Value="_Team.TeamMembers[4].ParticipantFirstName" />
                </label>
            </p>
            <p>
                <label>
                    Last Name
                    <br />
                    <InputText @bind-Value="_Team.TeamMembers[4].ParticipantLastName" />
                </label>
            </p>
            <p>
                <label>
                    Email
                    <InputText placeholder="johndoe@gmail.com" @bind-Value="_Team.TeamMembers[4].ParticipantEMail" />
                </label>
            </p>
            <p>
                <label>
                    Phone Number
                    <InputText placeholder="(xxx)-xxx-xxxx" @bind-Value="_Team.TeamMembers[4].PhoneOfParticipant" />
                </label>
            </p>
            <p>
                <label>
                    In Game Name
                    <InputText @bind-Value="_Team.TeamMembers[4].InGameName" />
                </label>
            </p>
        </EditForm>
    }
    else
    {
        <h1>Single</h1>
        <EditForm Model="@_Participant" OnValidSubmit="HandleValidSubmit">
            <p>
                <label>
                    First Name
                    <InputText @bind-Value="_Participant.ParticipantFirstName" />
                </label>
            </p>
            <p>
                <label>
                    Last Name
                    <br />
                    <InputText @bind-Value="_Participant.ParticipantLastName" />
                </label>
            </p>
            <p>
                <label>
                    Email
                    <InputText @bind-Value="_Participant.ParticipantEMail" placeholder="johndoe@gmail.com" />
                </label>
            </p>
            <p>
                <label>
                    Phone Number
                    <InputText @bind-Value="_Participant.PhoneOfParticipant" placeholder="(xxx)-xxx-xxxx" />
                </label>
            </p>
            <p>
                <label>
                    In Game Name
                    <InputText @bind-Value="_Participant.InGameName" />
                </label>
            </p>
            <button type="submit">
                Submit
            </button>
        </EditForm>
    }
}

<h1>@_Participant.ParticipantFirstName</h1>
<h1>Login Result:</h1>


@if (_ErrorRecieved != string.Empty)
{
    <p style="color: red"><em>Error Encountered: @_ErrorRecieved</em></p>
}

@if (_FogazzyConsole != string.Empty)
{
    <p style="color: #4800ff"><em>Console: @_FogazzyConsole</em></p>
}

@code
{
        string _CurrentGameChosen = null;
        Participant _Participant = new Participant();
        Team _Team = new Team();
        ToornamentToken _CurrentToken = null;
        string _ErrorRecieved = string.Empty;
        string _FogazzyConsole = string.Empty;

        public void GameSelected()
        {
            base.StateHasChanged();
        }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (await ToornamentAuthenticationUtility.DoesLocalTokenExistAsync(localStorage))
            {
                _CurrentToken = await ToornamentAuthenticationUtility.RetrieveTokenFromLocalStorage(localStorage);
            }
            else
            {
                Dictionary<string, StringValues> queryParams = null;
                queryParams = QueryHelpers.ParseQuery((NavManager.ToAbsoluteUri(NavManager.Uri)).Query);
                if (queryParams.ContainsKey("RegistrationState"))
                {
                    switch (queryParams["RegistrationState"])
                    {
                        case "LoginInProgress":
                            if (!(queryParams.ContainsKey("SubmissionID") && queryParams.ContainsKey("AccessToken") && queryParams.ContainsKey("RefreshToken") && queryParams.ContainsKey("ExpiresIn")))
                                throw new Exception("The RegistrationState is LoginInProgress but AccessToken, RefreshToken, or ExpiresIn missing from the query string");
                            ToornamentToken newToken =
                                new ToornamentToken
                                {
                                    AccessToken = queryParams["AccessToken"],
                                    RefreshToken = queryParams["RefreshToken"],
                                    ExpirationDateTime = DateTime.Now.AddSeconds(int.Parse(queryParams["ExpiresIn"]))
                                };
                            _CurrentToken = newToken;
                            await ToornamentAuthenticationUtility.StoreTokenInLocalStorage(
                                localStorage,
                                newToken
                                );

                            //Get submission using submission ID from localstorage
                            await SubmitRegistrationAsync(await localStorage.GetItemAsync<RegistrationSubmission>(queryParams["SubmissionID"]));
                            break;
                        default:
                            throw new Exception("Invalid");
                    }
                }
            }
        }
        catch (Exception eX)
        {
            _ErrorRecieved += eX.ToString();
            this.StateHasChanged();
        }
    }

    private async Task SubmitRegistrationAsync(RegistrationSubmission RegistrationToSubmit)
    {
        RegistrationToSubmit.TokenToUse = _CurrentToken;
        await Http.PostJsonAsync<RegistrationSubmission>("https://localhost:44366/Registration/RegisterForTournament", RegistrationToSubmit);
    }

    private async Task HandleValidSubmit()
    {
        if (IsSingleGameChosen())
            _Participant.GameChosen = _CurrentGameChosen;
        else
            _Team.GameChosen = _CurrentGameChosen;
        if (_CurrentToken == null)
        {
            string newSubmissionID = await StoreNewSubmissionForCallbackAsync();
            ToornamentAuthenticationUtility.InitiateLoginFlowToGetNewToken(NavManager, new Uri("https://localhost:44392/Register?RegistrationState=LoginInProgress&SubmissionID=" + newSubmissionID));
        }
        else
        {
            await SubmitRegistrationAsync(new RegistrationSubmission
            {
                SubmissionType = IsSingleGameChosen() ? "Single Participant" : "Team",
                ParticipantToRegister = IsSingleGameChosen() ? _Participant : null,
                TeamToRegister = !IsSingleGameChosen() ? _Team : null
            });
        }
    }

    private async Task<string> StoreNewSubmissionForCallbackAsync()
    {
        string newSubmissionIDasReturnVal = Guid.NewGuid().ToString();
        await localStorage.SetItemAsync
            (
                newSubmissionIDasReturnVal,
                new RegistrationSubmission
                {
                    SubmissionType = IsSingleGameChosen() ? "Single Participant" : "Team",
                    ParticipantToRegister = IsSingleGameChosen() ? _Participant : null,
                    TeamToRegister = !IsSingleGameChosen() ? _Team : null
                }
            );
        return newSubmissionIDasReturnVal;
    }

    private bool IsSingleGameChosen()
    {
        return !
        (
        _CurrentGameChosen.Contains("Rainbow Six Siege") ||
        _CurrentGameChosen.Contains("League of Legends")
        );
    }

}


